ext.githubProjectName = 'RxJava'

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
//apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/release.gradle')

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    apply from: file('gradle/buildscript.gradle'), to: buildscript 
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    repositories { 
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    group = "com.netflix.rxjava"

    // make 'examples' use the same classpath
    configurations { 
        examplesCompile.extendsFrom compile
        examplesRuntime.extendsFrom runtime
        perfCompile.extendsFrom compile
        perfRuntime.extendsFrom runtime
    }


    tasks.withType(Javadoc).each {
        it.classpath = sourceSets.main.compileClasspath
    }

    sourceSets {
        examples
        perf {
		    compileClasspath += sourceSets.main.output
		}
    }

    tasks.build { 
        //include 'examples' in build task
        dependsOn(examplesClasses)
		dependsOn(perfClasses)
    }

    dependencies {
        perfCompile 'org.openjdk.jmh:jmh-core:0.5.3'
        perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:0.5.3'

        //perfCompile project
    }
    
    eclipse {  
        classpath {
            plusConfigurations += configurations.perfCompile
            
            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
            scopes.PROVIDED.plus  += configurations.perfCompile
            scopes.PROVIDED.minus += configurations.compile
        }
    }

	task benchmarks(type: JavaExec) {
		main = 'org.openjdk.jmh.Main'
		classpath = sourceSets.perf.runtimeClasspath + sourceSets.main.output
	}
	
}

project(':rxjava-core') {
    sourceSets.test.java.srcDir 'src/test/java'
}
